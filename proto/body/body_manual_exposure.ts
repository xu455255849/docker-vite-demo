// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "body/body_manual_exposure.proto" (package "tv.yunxi.protobuf.body", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tv.yunxi.protobuf.body.ManualExposureParams
 */
export interface ManualExposureParams {
    /**
     * @generated from protobuf field: uint32 iso = 1;
     */
    iso: number;
    /**
     * @generated from protobuf field: uint32 shutter = 2;
     */
    shutter: number;
    /**
     * @generated from protobuf field: uint32 aperture = 3;
     */
    aperture: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ManualExposureParams$Type extends MessageType<ManualExposureParams> {
    constructor() {
        super("tv.yunxi.protobuf.body.ManualExposureParams", [
            { no: 1, name: "iso", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "shutter", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "aperture", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ManualExposureParams>): ManualExposureParams {
        const message = { iso: 0, shutter: 0, aperture: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ManualExposureParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManualExposureParams): ManualExposureParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 iso */ 1:
                    message.iso = reader.uint32();
                    break;
                case /* uint32 shutter */ 2:
                    message.shutter = reader.uint32();
                    break;
                case /* uint32 aperture */ 3:
                    message.aperture = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManualExposureParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 iso = 1; */
        if (message.iso !== 0)
            writer.tag(1, WireType.Varint).uint32(message.iso);
        /* uint32 shutter = 2; */
        if (message.shutter !== 0)
            writer.tag(2, WireType.Varint).uint32(message.shutter);
        /* uint32 aperture = 3; */
        if (message.aperture !== 0)
            writer.tag(3, WireType.Varint).uint32(message.aperture);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tv.yunxi.protobuf.body.ManualExposureParams
 */
export const ManualExposureParams = new ManualExposureParams$Type();
