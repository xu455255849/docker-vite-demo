// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "body/body_rect.proto" (package "tv.yunxi.protobuf.body", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tv.yunxi.protobuf.body.Rect
 */
export interface Rect {
    /**
     * @generated from protobuf field: uint32 left = 1;
     */
    left: number;
    /**
     * @generated from protobuf field: uint32 top = 2;
     */
    top: number;
    /**
     * @generated from protobuf field: uint32 right = 3;
     */
    right: number;
    /**
     * @generated from protobuf field: uint32 bottom = 4;
     */
    bottom: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Rect$Type extends MessageType<Rect> {
    constructor() {
        super("tv.yunxi.protobuf.body.Rect", [
            { no: 1, name: "left", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "top", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "right", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "bottom", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Rect>): Rect {
        const message = { left: 0, top: 0, right: 0, bottom: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Rect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rect): Rect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 left */ 1:
                    message.left = reader.uint32();
                    break;
                case /* uint32 top */ 2:
                    message.top = reader.uint32();
                    break;
                case /* uint32 right */ 3:
                    message.right = reader.uint32();
                    break;
                case /* uint32 bottom */ 4:
                    message.bottom = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Rect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 left = 1; */
        if (message.left !== 0)
            writer.tag(1, WireType.Varint).uint32(message.left);
        /* uint32 top = 2; */
        if (message.top !== 0)
            writer.tag(2, WireType.Varint).uint32(message.top);
        /* uint32 right = 3; */
        if (message.right !== 0)
            writer.tag(3, WireType.Varint).uint32(message.right);
        /* uint32 bottom = 4; */
        if (message.bottom !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bottom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tv.yunxi.protobuf.body.Rect
 */
export const Rect = new Rect$Type();
