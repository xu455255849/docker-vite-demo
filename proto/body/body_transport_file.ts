// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "body/body_transport_file.proto" (package "tv.yunxi.protobuf.body", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tv.yunxi.protobuf.body.TransportFile
 */
export interface TransportFile {
    /**
     * @generated from protobuf field: uint32 total_size = 1;
     */
    totalSize: number;
    /**
     * @generated from protobuf field: uint32 current_index = 2;
     */
    currentIndex: number;
    /**
     * @generated from protobuf field: string md5_info = 3;
     */
    md5Info: string;
    /**
     * @generated from protobuf field: string version = 4;
     */
    version: string;
    /**
     * @generated from protobuf field: uint32 buf_size = 5;
     */
    bufSize: number;
    /**
     * @generated from protobuf field: bytes buffer = 6;
     */
    buffer: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class TransportFile$Type extends MessageType<TransportFile> {
    constructor() {
        super("tv.yunxi.protobuf.body.TransportFile", [
            { no: 1, name: "total_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "current_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "md5_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "buf_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "buffer", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TransportFile>): TransportFile {
        const message = { totalSize: 0, currentIndex: 0, md5Info: "", version: "", bufSize: 0, buffer: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransportFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportFile): TransportFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 total_size */ 1:
                    message.totalSize = reader.uint32();
                    break;
                case /* uint32 current_index */ 2:
                    message.currentIndex = reader.uint32();
                    break;
                case /* string md5_info */ 3:
                    message.md5Info = reader.string();
                    break;
                case /* string version */ 4:
                    message.version = reader.string();
                    break;
                case /* uint32 buf_size */ 5:
                    message.bufSize = reader.uint32();
                    break;
                case /* bytes buffer */ 6:
                    message.buffer = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 total_size = 1; */
        if (message.totalSize !== 0)
            writer.tag(1, WireType.Varint).uint32(message.totalSize);
        /* uint32 current_index = 2; */
        if (message.currentIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.currentIndex);
        /* string md5_info = 3; */
        if (message.md5Info !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.md5Info);
        /* string version = 4; */
        if (message.version !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.version);
        /* uint32 buf_size = 5; */
        if (message.bufSize !== 0)
            writer.tag(5, WireType.Varint).uint32(message.bufSize);
        /* bytes buffer = 6; */
        if (message.buffer.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.buffer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tv.yunxi.protobuf.body.TransportFile
 */
export const TransportFile = new TransportFile$Type();
